# Methods definitions for drift detection
# Each method can have multiple implementations

[kolmogorov_smirnov]
    name            = "Kolmogorov-Smirnov Test"
    description     = "Non-parametric test that quantifies the distance between empirical distribution functions of two samples."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.2307/2280095", "Massey Jr (1951)"]

    [kolmogorov_smirnov.implementations.ks_batch]
        name            = "Batch Kolmogorov-Smirnov"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

    [kolmogorov_smirnov.implementations.ks_incremental]
        name            = "Incremental Kolmogorov-Smirnov"
        execution_mode  = "STREAMING"
        hyperparameters = ["threshold", "window_size"]
        references      = ["https://doi.org/10.1145/2939672.2939836", "dos Reis et al. (2016)"]

[cramer_von_mises]
    name            = "Cramér-von Mises Test"
    description     = "Non-parametric test that determines whether a sample comes from a specified distribution."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1080/03461238.1928.10416862", "Cramér (1902)"]

    [cramer_von_mises.implementations.cvm_batch]
        name            = "Batch Cramér-von Mises"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

    [cramer_von_mises.implementations.cvm_online]
        name            = "Online Cramér-von Mises"
        execution_mode  = "STREAMING"
        hyperparameters = ["threshold", "window_size"]
        references      = []

[anderson_darling]
    name            = "Anderson-Darling Test"
    description     = "Statistical test that detects whether a sample comes from a specified distribution, with increased sensitivity in the tails."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.2307/2288805", "Scholz and Stephens (1987)"]

    [anderson_darling.implementations.ad_batch]
        name            = "Anderson-Darling Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[mann_whitney]
    name            = "Mann-Whitney U-Test"
    description     = "Non-parametric test to determine whether two independent samples come from the same distribution."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1214/aoms/1177730491", "Mann and Whitney (1947)"]

    [mann_whitney.implementations.mw_batch]
        name            = "Mann-Whitney U-Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[kuiper]
    name            = "Kuiper Test"
    description     = "Non-parametric test similar to Kolmogorov-Smirnov but more sensitive to differences in the tails of distributions."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1016/S1385-7258(60)50006-0", "Kuiper (1960)"]

    [kuiper.implementations.kuiper_batch]
        name            = "Batch Kuiper Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[baumgartner_weiss_schindler]
    name            = "Baumgartner Weiss Schindler Test"
    description     = "Non-parametric test for equality of multivariate distributions."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.2307/2533862", "Baumgartner et al. (1998)"]

    [baumgartner_weiss_schindler.implementations.bws_batch]
        name            = "Batch Baumgartner Weiss Schindler Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[t_test]
    name            = "T-Test"
    description     = "Parametric test that determines if there is a significant difference between the means of two groups."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://en.wikipedia.org/wiki/Student%27s_t-test"]

    [t_test.implementations.ttest_batch]
        name            = "Batch T-Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[welch_t_test]
    name            = "Welch's T-Test"
    description     = "Adaptation of the t-test for samples with unequal variances."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.2307/2332510", "Welch (1947)"]

    [welch_t_test.implementations.welch_batch]
        name            = "Batch Welch's T-Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[epps_singleton]
    name            = "EPPS-Singleton Test"
    description     = "Test for equality of distributions that can be more powerful than Kolmogorov-Smirnov for certain distributions."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.epps_singleton_2samp.html"]

    [epps_singleton.implementations.epps_batch]
        name            = "Batch EPPS-Singleton Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[chi_square]
    name            = "Chi-square Test"
    description     = "Statistical test that determines whether there is a significant difference between observed and expected frequencies."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CATEGORICAL"]
    requires_labels = false
    references      = ["https://doi.org/10.1080/14786440009463897", "Pearson (1900)"]

    [chi_square.implementations.chi_batch]
        name            = "Batch Chi-square Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[fisher_exact]
    name            = "Fisher Exact Test"
    description     = "Exact test for categorical data analysis when sample sizes are small."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CATEGORICAL"]
    requires_labels = false
    references      = ["https://en.wikipedia.org/wiki/Fisher%27s_exact_test"]

    [fisher_exact.implementations.fisher_batch]
        name            = "Batch Fisher Exact Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

    [fisher_exact.implementations.fisher_online]
        name            = "Online Fisher Exact Test"
        execution_mode  = "STREAMING"
        hyperparameters = ["threshold", "window_size"]
        references      = ["https://en.wikipedia.org/wiki/Fisher%27s_exact_test"]

[g_test]
    name            = "G-Test"
    description     = "Log-likelihood ratio test that compares observed frequencies to expected frequencies."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CATEGORICAL"]
    requires_labels = false
    references      = ["https://en.wikipedia.org/wiki/G-test"]

    [g_test.implementations.g_batch]
        name            = "Batch G-Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[z_test]
    name            = "Z-Test"
    description     = "Statistical test used to determine whether two population means are different when variances are known."
    drift_types     = ["COVARIATE"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CATEGORICAL"]
    requires_labels = false
    references      = ["https://en.wikipedia.org/wiki/Z-test"]

    [z_test.implementations.z_batch]
        name            = "Batch Z-Test"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[maximum_mean_discrepancy]
    name            = "Maximum Mean Discrepancy"
    description     = "Kernel-based method that measures the distance between distributions in a reproducing kernel Hilbert space."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "MULTIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://dl.acm.org/doi/10.5555/2188385.2188410", "Gretton et al. (2012)"]

    [maximum_mean_discrepancy.implementations.mmd_batch]
        name            = "Batch Maximum Mean Discrepancy"
        execution_mode  = "BATCH"
        hyperparameters = ["kernel", "gamma", "threshold"]
        references      = []

    [maximum_mean_discrepancy.implementations.mmd_online]
        name            = "Online Maximum Mean Discrepancy"
        execution_mode  = "STREAMING"
        hyperparameters = ["kernel", "gamma", "threshold", "window_size"]
        references      = ["https://dl.acm.org/doi/10.5555/2188385.2188410", "Gretton et al. (2012)"]

    [maximum_mean_discrepancy.implementations.mmd_empirical]
        name            = "Empirical Maximum Mean Discrepancy"
        execution_mode  = "BATCH"
        hyperparameters = ["kernel", "gamma", "threshold"]
        references      = ["https://dl.acm.org/doi/10.5555/2188385.2188410", "Gretton et al. (2012)"]

[wasserstein_distance]
    name            = "Wasserstein Distance"
    description     = "Metric that measures the distance between probability distributions, also known as Earth Mover's Distance."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1023/A:1026543900054", "Rubner et al. (2000)"]

    [wasserstein_distance.implementations.wasserstein_batch]
        name            = "Batch Wasserstein Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

    [wasserstein_distance.implementations.earth_mover_distance]
        name            = "Earth Mover's Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = ["https://doi.org/10.1023/A:1026543900054", "Rubner et al. (2000)"]

[energy_distance]
    name            = "Energy Distance"
    description     = "Distance between distributions based on statistical energy, sensitive to any type of distributional difference."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1016/j.jspi.2013.03.018", "Székely et al. (2013)"]

    [energy_distance.implementations.energy_batch]
        name            = "Batch Energy Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[hellinger_distance]
    name            = "Hellinger Distance"
    description     = "Measure of similarity between two probability distributions, related to the Bhattacharyya distance."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS", "CATEGORICAL"]
    requires_labels = false
    references      = ["https://doi.org/10.1515/CRLL.1909.136.210", "Hellinger (1909)"]

    [hellinger_distance.implementations.hellinger_batch]
        name            = "Batch Hellinger Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[bhattacharyya_distance]
    name            = "Bhattacharyya Distance"
    description     = "Measure of similarity between two probability distributions, closely related to the Hellinger distance."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://www.jstor.org/stable/25047882", "Bhattacharyya (1946)"]

    [bhattacharyya_distance.implementations.bhattacharyya_batch]
        name            = "Batch Bhattacharyya Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[total_variation_distance]
    name            = "Total Variation Distance"
    description     = "Maximum difference between the probabilities assigned by two distributions."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CATEGORICAL"]
    requires_labels = false
    references      = ["https://en.wikipedia.org/wiki/Total_variation_distance_of_probability_measures"]

    [total_variation_distance.implementations.tvd_batch]
        name            = "Batch Total Variation Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[l_infinity_distance]
    name            = "L-Infinity Distance"
    description     = "Maximum absolute difference between corresponding elements of two distributions, also known as Supremum norm."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://en.wikipedia.org/wiki/Chebyshev_distance"]

    [l_infinity_distance.implementations.linf_batch]
        name            = "Batch L-Infinity Distance"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold"]
        references      = []

[histogram_intersection_normalized_complement]
    name            = "Histogram Intersection Normalized Complement"
    description     = "Measures dissimilarity between histograms by calculating complement of their intersection."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS", "CATEGORICAL"]
    requires_labels = false
    references      = ["https://doi.org/10.1007/BF00130487", "Swain and Ballard (1991)"]

    [histogram_intersection_normalized_complement.implementations.hist_inter_batch]
        name            = "Batch Histogram Intersection Normalized Complement"
        execution_mode  = "BATCH"
        hyperparameters = ["bins", "threshold"]
        references      = []

[kullback_leibler_divergence]
    name            = "Kullback-Leibler Divergence Drift Detection"
    description     = "Measures the difference between two probability distributions using KL divergence."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS", "CATEGORICAL"]
    requires_labels = false
    references      = ["https://doi.org/10.1214/aoms/1177729694", "Kullback and Leibler (1951)"]

    [kullback_leibler_divergence.implementations.kl_batch]
        name            = "Batch Kullback-Leibler Divergence"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold", "bins"]
        references      = []

[jensen_shannon_divergence]
    name            = "Jensen-Shannon Divergence Drift Detection"
    description     = "Symmetrized and smoothed version of KL divergence for measuring distribution difference."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS", "CATEGORICAL"]
    requires_labels = false
    references      = ["https://doi.org/10.1109/18.61115", "Lin (1991)"]

    [jensen_shannon_divergence.implementations.js_batch]
        name            = "Batch Jensen-Shannon Divergence"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold", "bins"]
        references      = []

[population_stability_index]
    name            = "Population Stability Index"
    description     = "Measures the stability of a distribution over time, based on KL divergence."
    drift_types     = ["COVARIATE"]
    family          = "DISTANCE_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS", "CATEGORICAL"]
    requires_labels = false
    references      = ["https://doi.org/10.1057/jors.2008.144", "Wu and Olson (2010)"]

    [population_stability_index.implementations.psi_batch]
        name            = "Batch Population Stability Index"
        execution_mode  = "BATCH"
        hyperparameters = ["threshold", "bins"]
        references      = []

[drift_detection_method]
    name            = "Drift Detection Method (DDM)"
    description     = "Monitors classification error rate to detect concept drift in streams."
    drift_types     = ["CONCEPT"]
    family          = "STATISTICAL_PROCESS_CONTROL"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.1007/978-3-540-28645-5_29", "Gama et al. (2004)"]

    [drift_detection_method.implementations.ddm_standard]
        name            = "Standard DDM"
        execution_mode  = "STREAMING"
        hyperparameters = ["warning_level", "drift_level"]
        references      = []

[early_drift_detection_method]
    name = "Early Drift Detection Method (EDDM)"
    description = "Extension of DDM that detects gradual concept drift earlier."
    drift_types = ["CONCEPT"]
    family = "STATISTICAL_PROCESS_CONTROL"
    data_dimension = "UNIVARIATE"
    data_types = ["CONTINUOUS"]
    requires_labels = true
    references = [
        "https://www.researchgate.net/publication/245999704_Early_Drift_Detection_Method",
        "Baena-Garcıa et al. (2006)",
    ]

    [early_drift_detection_method.implementations.eddm_standard]
        name            = "Standard EDDM"
        execution_mode  = "STREAMING"
        hyperparameters = ["warning_level", "drift_level"]
        references      = []

[page_hinkley]
    name            = "Page-Hinkley Test"
    description     = "Sequential analysis technique for detecting changes in the average of a Gaussian signal."
    drift_types     = ["CONCEPT"]
    family          = "CHANGE_DETECTION"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.2307/2333009", "Page (1954)"]

    [page_hinkley.implementations.ph_standard]
        name            = "Standard Page-Hinkley"
        execution_mode  = "STREAMING"
        hyperparameters = ["delta", "lambda", "alpha"]
        references      = []

[adaptive_windowing]
    name            = "Adaptive Windowing (ADWIN)"
    description     = "Uses adaptive window sizes to detect changes in data streams."
    drift_types     = ["CONCEPT", "COVARIATE"]
    family          = "WINDOW_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1137/1.9781611972771.42", "Bifet and Gavalda (2007)"]

    [adaptive_windowing.implementations.adwin_standard]
        name            = "Standard ADWIN"
        execution_mode  = "STREAMING"
        hyperparameters = ["delta"]
        references      = []

[cusum]
    name            = "Cumulative Sum Control Chart (CUSUM)"
    description     = "Sequential analysis technique for monitoring change detection using cumulative sum."
    drift_types     = ["CONCEPT"]
    family          = "CHANGE_DETECTION"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.2307/2333009", "Page (1954)"]

    [cusum.implementations.cusum_standard]
        name            = "Standard CUSUM"
        execution_mode  = "STREAMING"
        hyperparameters = ["threshold", "drift_threshold"]
        references      = []

[geometric_moving_average]
    name            = "Geometric Moving Average"
    description     = "Control chart that monitors the geometric weighted moving average of a process."
    drift_types     = ["CONCEPT"]
    family          = "CHANGE_DETECTION"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.2307/1266443", "Roberts (1959)"]

    [geometric_moving_average.implementations.gma_standard]
        name            = "Standard Geometric Moving Average"
        execution_mode  = "STREAMING"
        hyperparameters = ["lambda", "threshold"]
        references      = []

[exponential_cumulative_drift]
    name            = "Exponential Cumulative Drift Detection"
    description     = "Extends CUSUM with exponential weighting for more adaptive drift detection."
    drift_types     = ["CONCEPT"]
    family          = "STATISTICAL_PROCESS_CONTROL"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.1016/j.patrec.2011.08.019", "Ross et al. (2012)"]

    [exponential_cumulative_drift.implementations.ecdd_standard]
        name            = "Standard Exponential Cumulative Drift Detection"
        execution_mode  = "STREAMING"
        hyperparameters = ["lambda", "threshold"]
        references      = []

[ewma_CONCEPT]
    name            = "EWMA Concept Drift Detection Warning"
    description     = "Uses exponentially weighted moving average charts with warning levels for drift detection."
    drift_types     = ["CONCEPT"]
    family          = "STATISTICAL_PROCESS_CONTROL"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.1016/j.patrec.2011.08.019", "Ross et al. (2012)"]

    [ewma_CONCEPT.implementations.ewma_standard]
        name            = "Standard EWMA Concept Drift Detection"
        execution_mode  = "STREAMING"
        hyperparameters = ["lambda", "warning_threshold", "drift_threshold"]
        references      = []

[hoeffding_drift_detection_test_a]
    name            = "Hoeffding's Drift Detection Method Test-A"
    description     = "Variation of drift detection method using Hoeffding's inequality (Test A variant)."
    drift_types     = ["CONCEPT"]
    family          = "STATISTICAL_PROCESS_CONTROL"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.1109/TKDE.2014.2345382", "Frias-Blanco et al. (2014)"]

    [hoeffding_drift_detection_test_a.implementations.hddm_a_standard]
        name            = "Standard Hoeffding's Drift Detection Method Test-A"
        execution_mode  = "STREAMING"
        hyperparameters = ["delta"]
        references      = []

[hoeffding_drift_detection_test_w]
    name            = "Hoeffding's Drift Detection Method Test-W"
    description     = "Variation of drift detection method using Hoeffding's inequality (Test W variant)."
    drift_types     = ["CONCEPT"]
    family          = "STATISTICAL_PROCESS_CONTROL"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = true
    references      = ["https://doi.org/10.1109/TKDE.2014.2345382", "Frias-Blanco et al. (2014)"]

    [hoeffding_drift_detection_test_w.implementations.hddm_w_standard]
        name            = "Standard Hoeffding's Drift Detection Method Test-W"
        execution_mode  = "STREAMING"
        hyperparameters = ["delta"]
        references      = []

[kswin]
    name            = "Kolmogorov-Smirnov Windowing (KSWIN)"
    description     = "Kolmogorov-Smirnov Windowing method for drift detection in data streams."
    drift_types     = ["CONCEPT"]
    family          = "WINDOW_BASED"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS"]
    requires_labels = false
    references      = ["https://doi.org/10.1016/j.neucom.2019.11.111", "Raab et al. (2020)"]

    [kswin.implementations.kswin_standard]
        name            = "Standard KSWIN"
        execution_mode  = "STREAMING"
        hyperparameters = ["alpha", "window_size"]
        references      = []

[periodic_trigger]
    name            = "Periodic Trigger Detector"
    description     = "Detector that triggers drift detection at regular intervals for testing purposes."
    drift_types     = ["CONCEPT", "COVARIATE", "LABEL"]
    family          = "STATISTICAL_TEST"
    data_dimension  = "UNIVARIATE"
    data_types      = ["CONTINUOUS", "CATEGORICAL"]
    requires_labels = false
    references      = []

    [periodic_trigger.implementations.periodic_trigger_standard]
        name            = "Standard Periodic Trigger Detector"
        execution_mode  = "STREAMING"
        hyperparameters = ["interval"]
        references      = []
